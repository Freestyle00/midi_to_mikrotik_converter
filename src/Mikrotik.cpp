#include "Mikrotik.h"
#include "boost/log/trivial.hpp"
#include <sstream>
#include <fstream>

Mikrotik::Mikrotik()
{

}

Mikrotik::~Mikrotik()
{

}

void Mikrotik::setNoteComments(bool flag)
{
	m_commentsFlag = flag;
}

std::string Mikrotik::getScriptHeader()
{
	std::stringstream outputBuffer;
	outputBuffer << "#----------------File Description-----------------#\n";
	outputBuffer << "# This file generated by Midi To Mikrotik Converter\n";
	/*
	outputBuffer << "# Original midi file name/path: " << m_filePath << "\n";
	outputBuffer << "# Track BPM: " << m_tempoTrack << "\n";
	outputBuffer << "# MIDI Channel: " << std::to_string(midiChannel) << "\n";
	outputBuffer << "# Number of notes: " << std::to_string(notesCount) << "\n";
	outputBuffer << "# Track length: " << ctl.h << "h " << ctl.m << "m " << ctl.s << "s " << ctl.ms << "ms\n";
	outputBuffer << "# Track text: " << chunk.mtrkChunkHandler.getTrackText() << "\n";
	outputBuffer << "# Track copyright: " << chunk.mtrkChunkHandler.getCopyright() << "\n";
	outputBuffer << "# Track name: " << chunk.mtrkChunkHandler.getTrackName() << "\n";
	outputBuffer << "# Vocals: " << chunk.mtrkChunkHandler.getInstrumentName() << "\n";
	outputBuffer << "# Instrument name: " << chunk.mtrkChunkHandler.getVocalText() << "\n";
	outputBuffer << "# Text marker: " << chunk.mtrkChunkHandler.getTextMarker() << "\n";
	outputBuffer << "# Cue Point: " << chunk.mtrkChunkHandler.getCuePoint() << "\n";
	outputBuffer << "#-------------------------------------------------#\n\n";
	*/
	return outputBuffer.str();
}

std::string Mikrotik::buildNote(Note noteOn, Note noteOff)
{
	/*
	 * :beep frequency=440 length=1000ms;
	 * :delay 1000ms;
	 */
	std::stringstream outputBuffer;
	outputBuffer << ":beep frequency=" << noteOn.getFreqencyHz();
	outputBuffer << " length=" << noteOn.getDurationPulses() << "ms;";
	if(m_commentsFlag)
		outputBuffer << " # " << noteOn.getSymbolicNote();
	outputBuffer << "\n:delay " << 
		(noteOff.getDurationPulses() + noteOn.getDurationPulses()) << "ms;\n\n";
	return outputBuffer.str();
}

int Mikrotik::buildScript(std::string &fileName)
{
	std::stringstream outputBuffer;
	for(const auto & note : m_notes)
	{
		//buildNote(note.getFreqencyHz(), note.getDurationMs());
	}

	std::ofstream outputFile;
	outputFile.open(fileName + std::string(".txt"));
	if(!outputFile.is_open())
	{
		BOOST_LOG_TRIVIAL(info) << "Mikrotik buildScript failed cannot create output file: " 
		<< (fileName + std::string(".txt"));
		return -1;
	}
	outputFile << outputBuffer.str();
	outputFile.close();
	return 0;
}
